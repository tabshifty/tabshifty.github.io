{"version":3,"sources":["webpack:///./src/views/Css.vue","webpack:///./src/textConfig/css/list.js","webpack:///./src/views/Css.vue?30dc"],"names":["class","list","cssList","path","content","description","anchor","name","data","components","Wrapper","__exports__","render"],"mappings":"0IACSA,MAAM,e,uGAAX,gCAEM,MAFN,EAEM,CADF,yBAA2B,GAAjBC,KAAM,EAAAC,SAAO,mBCFhB,OACX,CACIC,KAAM,OACNC,QAAQ,aAGZ,CACID,KAAK,MACLC,QAAS,WACTC,YAAW,mbAcXC,OAAQ,OAGZ,CACIH,KAAK,aACLC,QAAS,mBACTC,YAAW,s7BAoBXC,OAAQ,cAGZ,CACIH,KAAK,iBACLC,QAAS,sBACTC,YAAW,6sBAgBXC,OAAQ,mB,YD7DD,GACXC,KAAM,MACNC,KAFW,WAGP,MAAO,CACHN,QAASD,IAGjBQ,WAAY,CACRC,UAAA,O,qBEbR,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0cf38c.581ea6b1.js","sourcesContent":["<template>\r\n    <div class=\"css-content\">\r\n        <Wrapper :list=\"cssList\" />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport list from '@/textConfig/css/list.js'\r\nimport Wrapper from './Wrapper.vue'\r\n\r\nexport default {\r\n    name: \"Css\",\r\n    data() {\r\n        return {\r\n            cssList: list\r\n        }\r\n    },\r\n    components: {\r\n        Wrapper\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>","export default [\r\n    {\r\n        path: 'flex',\r\n        content:'Flex的一些问题'\r\n    },\r\n    \r\n    {   \r\n        path:'bfc',\r\n        content: '对于BFC的描述',\r\n        description:\r\n`块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。  \r\n\r\n * BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。\r\n * 如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。\r\n        \r\n创建BFC\r\n\r\n 1. 根元素或包含根元素的元素\r\n 2. 浮动元素float＝left|right或inherit（≠none）\r\n 3. 绝对定位元素position＝absolute或fixed\r\n 4. display＝inline-block|flex|inline-flex|table-cell或table-caption\r\n 5. overflow＝hidden|auto或scroll(≠visible)\r\n        `,\r\n        anchor: \"bfc\"\r\n    },\r\n\r\n    {   \r\n        path:'lineheight',\r\n        content: '对于line-height的描述',\r\n        description:\r\n` 1. 对于非替换元素的纯内联元素，其可视高度完全由line-height决定。对于文本这样的纯内联元素，line-height就是高\r\n度计算的基石，用专业说法就是指定了用来计算行框盒子高度的基础高度。\r\n 2. 内联元素的高度由固定高度和不固定高度组成，这个不固定的部分就是这里的“行距”。换句话说，line-height之所以起作\r\n用，就是通过改变“行距”来实现的。在CSS中，“行距”分散在当前文字的上方和下方，也就是即使是第一行文字，其上方也是\r\n有“行距”的，只不过这个“行距”的高度仅仅是完整“行距”高度的一半，因此，也被称为“半行距”。\r\n 3. 行距=line-height-font-size。\r\n 4. border以及line-height等传统CSS属性并没有小数像素的概念。如果标注的是文字上边距，则向下取整；如果是文字下\r\n边距，则向上取整。\r\n 5. 对于纯文本元素，line-height直接决定了最终的高度。但是，如果同时有替换元素，则line-height只能决定最小高度。\r\n 6. 对于块级元素，line-height对其本身是没有任何作用的，我们平时改变line-height，块级元素的高度跟着变化实际上是\r\n通过改变块级元素里面内联级别元素占据的高度实现的。\r\n 7. line-height的默认值是normal，还支持数值、百分比值以及长度值。为数值类型时，其最终的计算值是和当前font-si\r\nze相乘后的值。为百分比值时，其最终的计算值是和当前font-size相乘后的值。为长度值时原意不变。\r\n 8. 如果使用数值作为line-height的属性值，那么所有的子元素继承的都是这个值；但是，如果使用百分比值或者长度值作为\r\n属性值，那么所有的子元素继承的是最终的计算值。\r\n 9. 无论内联元素line-height如何设置，最终父级元素的高度都是由数值大的那个line-height决定的。\r\n 10. 只要有“内联盒子”在，就一定会有“行框盒子”，就是每一行内联元素外面包裹的一层看不见的盒子。然后，重点来了，在每个\r\n“行框盒子”前面有一个宽度为0的具有该元素的字体和行高属性的看不见的“幽灵空白节点”。\r\n        `,\r\n        anchor: \"lineheight\"\r\n    },\r\n\r\n    {   \r\n        path:'vertical-align',\r\n        content: '对于vertical-align的描述',\r\n        description:\r\n` 1. vertical-align的默认值是baseline，即基线对齐，而基线的定义是字母x的下边缘。因此，内联元素默认都是沿着字\r\n母x的下边缘对齐的。对于图片等替换元素，往往使用元素本身的下边缘作为基线。：一个inline-block元素，如果里面\r\n没有内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘；否则其基线就是元素里面最后一行\r\n内联元素的基线。\r\n 2. vertical-align:top就是垂直上边缘对齐，如果是内联元素，则和这一行位置最高的内联元素的顶部对齐；如果display\r\n计算值是table-cell的元素，我们不妨脑补成<td>元素，则和<tr>元素上边缘对齐。\r\n 3. vertical-align:middle是中间对齐，对于内联元素，元素的垂直中心点和行框盒子基线往上1/2x-height处对齐。对\r\n于table-cell元素，单元格填充盒子相对于外面的表格行居中对齐。\r\n 4. vertical-align支持数值属性，根据数值的不同，相对于基线往上或往下偏移，如果是负值，往下偏移，如果是正值，往上\r\n偏移。\r\n 5. vertical-align属性的百分比值则是相对于line-height的计算值计算的。\r\n 6. vertical-align起作用是有前提条件的，这个前提条件就是：只能应用于内联元素以及display值为table-cell的元\r\n素。\r\n 7. table-cell元素设置vertical-align垂直对齐的是子元素，但是其作用的并不是子元素，而是table-cell元素自身。\r\n        `,\r\n        anchor: \"vertical-align\"\r\n    },\r\n\r\n]","import { render } from \"./Css.vue?vue&type=template&id=0b462518\"\nimport script from \"./Css.vue?vue&type=script&lang=js\"\nexport * from \"./Css.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue-project\\\\interview\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}